plugins {
    id "io.kotest.multiplatform"
    id "org.jetbrains.dokka"
    id "org.jetbrains.kotlin.multiplatform"
    id "maven-publish"
    id "signing"
}

task javadoc(type: Javadoc) {

}

def javadocJar = task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

kotlin {
    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = "1.8"
        }
        withJava()
        testRuns["test"].executionTask.configure {
            useJUnitPlatform()
        }
    }

    ios {
        binaries {
            framework {
                baseName = "HttpApiClient"
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                api "io.arrow-kt:arrow-core:${rootProject.ext.arrowVersion}"
                api "io.arrow-kt:arrow-fx-coroutines:${rootProject.ext.arrowVersion}"
            }
        }

        commonTest {
            dependencies {
                implementation "io.kotest:kotest-framework-engine:${rootProject.ext.kotestVersion}"
                implementation "io.kotest:kotest-assertions-core:${rootProject.ext.kotestVersion}"
                implementation "io.kotest:kotest-property:${rootProject.ext.kotestVersion}"
                implementation "io.kotest.extensions:kotest-assertions-arrow:1.2.3"
            }
        }

        iosMain {
            dependsOn(commonMain)
            iosX64Main.dependsOn(it)
            iosArm64Main.dependsOn(it)
        }

        iosTest {
            dependsOn(commonTest)
            iosX64Test.dependsOn(it)
            iosArm64Test.dependsOn(it)
        }

        jvmMain {
            // we publish submodules in this group.
            group "au.com.redcrew.apisdkcreator"
            version "0.6.0"
        }

        jvmTest {
            dependencies {
                implementation "io.kotest:kotest-runner-junit5:${rootProject.ext.kotestVersion}"
            }
        }
    }
}

dokkaHtml {
    dokkaSourceSets {
        commonMain {
            sourceRoots.from("src/commonMain")
        }

        jvmMain {
            sourceRoots.from("src/jvmMain")
        }
    }

    outputDirectory.set(new File("${projectDir}/docs"))

    // TODO When Dokka >= 1.4.10 is published
    //moduleName ApiSdkCreator MPP")
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")

            username = System.getenv("OSSRH_USERNAME") ?: ""
            password = System.getenv("OSSRH_PASSWORD") ?: ""
        }
    }
}

publishing {
    publications.forEach {
        it.artifact(javadocJar)

        it.pom {
            name.set("HttpApiClient")
            description.set("Kotlin library to aid developers in the creation of API client SDKs. ")
            url.set("https://github.com/RedCrewOS/api-sdk-creator-mpp")

            scm {
                connection.set("scm:git:https://github.com/RedCrewOS/api-sdk-creator-mpp/")
                developerConnection.set("scm:git:https://github.com/kierans/")
                url.set("https://github.com/RedCrewOS/api-sdk-creator-mpp")
            }

            licenses {
                license {
                    name.set("MIT")
                    url.set("https://mit-license.org/")
                }
            }

            developers {
                developer {
                    id.set("kierans")
                    name.set("Kieran Simpson")
                    email.set("kieran@redcrew.com.au")
                }
            }
        }
    }
}

signing {
    useGpgCmd()

    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")

    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications
}
